#!/bin/bash

# What It Does

# Input: The script reads lines from stdin (e.g., piped input
# or a file redirected to it).

# Output: It concatenates all input lines into a single line,
# with the specified separator (SEP) between each pair of
# lines, and ends with a newline.

# Key Feature: The first line is printed without a leading
# separator (since awk_sep is initially empty), ensuring no
# extra separator appears at the start.
#
# # Set SEP to the first argument if provided, otherwise
# default to ':'
SEP="${1:-:}"

# Typical Usage:
#
# (paths | uniq | ./multi-join)

# use paths to split PATH into multiple lines
# then use unique to keep only first of each duplicate
# then use multi-join to create a new PATH

# Pass the bash variable SEP into awk using the -v option
# Use a different awk variable name (e.g., out_sep) to avoid confusion
# with the internal awk variable 'awk_sep' used for printing.
awk -v out_sep="$SEP" '
{
  printf "%s%s", awk_sep, $0 # Print separator (empty first time), then line
  awk_sep = out_sep         # Set separator for the *next* line
}
END {
  print ""                  # Print final newline
}'
