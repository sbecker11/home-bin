#!/bin/bash

# This script is useful for developers who use virtual environments
# and need to quickly activate the virtual environment,
# upgrade pip, and set the PYTHONPATH to include the src and tests directories.
# It also removes duplicates from the PYTHONPATH.
# It is intended to be used as a command line tool.
# It is not intended to be used as a script in a project.
# It is intended to be used as a command line tool that is
# sourced in the shell.

# this script is sourced by the alias venv-activate
# it is not intended to be run as a standalone script
# it is intended to be sourced in the shell or in 
# a script that is run in the shell.

prompt() {
    echo -n "$1 "
    read -n 1
    echo
}

# Function to handle errors
handle_error() {
    echo -n "$1 "
    read -n 1 
    echo
    return 1
}

# if venv is found at cwd (current working directory) 
# then attempt to activate it.
# if venv is found at project root then attempt to activate it.
# if venv is not found at either cwd or project root then
# prompt user to use 'venv-make' to make a new virtual environment.

VENV_HOME=""
PROJECT_ROOT=$(git rev-parse --show-toplevel)

# check if current directory has a venv directory
if [ -d "$(pwd)/venv" ] && [ -f "$(pwd)/venv/bin/activate" ]; then
    VENV_HOME="$(pwd)"
else 
    if [ -d "${PROJECT_ROOT}/venv" ] && [ -f "${PROJECT_ROOT}/venv/bin/activate" ]; then
        VENV_HOME="${PROJECT_ROOT}"
    else
        # prompt the user to create a new virtual environment with 'venv-make'
        echo "No venv found in the current directory or project root."
        prompt "Please run 'venv-make' to create a new venv (Hit a key)"
        return 0
    fi
fi

prompt "activating the existing virtual environment at ${VENV_HOME} (hit a key)"
source "${VENV_HOME}/venv/bin/activate"

# Check if the virtual environment is activated
if [ -z "$VIRTUAL_ENV" ]; then
    handle_error "Failed to activate the existing virtual environment. (hit a key)"
fi
prompt "upgrading pip (hit a key)"
python -m pip install --upgrade pip || handle_error "Failed to upgrade pip"

if [ -f ${VENV_HOME}/requirements.txt ]; then
    prompt "installing all required packages in ${VENV_HOME}/requirements.txt} (hit a key)"
    python -m pip install -r ${VENV_HOME}/requirements.txt || handle_error "Failed to install requirements.txt file"
else
    handle_error "requirements.txt file not found. (hit a key)"
fi

# if PROJECT_ROOT is defined and if it matches VENV_HOME then 
# set PYTHONPATH to include the src and tests directories if found
if [ -n "${PROJECT_ROOT}" ] && [ "${PROJECT_ROOT}" = "${VENV_HOME}" ] ; then

    # If the project has a src directory and if not 
    # already in the PYTHONPATH, then add it.
    if [ -f "$PROJECT_ROOT/src/__init__.py" ]; then
        SRC_PATH="$PROJECT_ROOT/src"
        if [[ ":$PYTHONPATH:" != *":$SRC_PATH:"* ]]; then
            prompt "adding $SRC_PATH to PYTHONPATH (hit a key)"
            export PYTHONPATH="$SRC_PATH:$PYTHONPATH"
        fi
    fi

    # Likewise, if the project has a tests directory and if not 
    # already in the PYTHONPATH then add it.
    if [[ -d "$PROJECT_ROOT/tests" ]]; then
        TESTS_PATH="$PROJECT_ROOT/tests"
        if [[ ":$PYTHONPATH:" != *":$TESTS_PATH:"* ]]; then
            prompt "adding $TESTS_PATH to PYTHONPATH (hit a key)"
            export PYTHONPATH="$TESTS_PATH:$PYTHONPATH"
        fi
    fi

fi

prompt "Removing duplicates from PYTHONPATH (hit a key)"
export PYTHONPATH=$(echo "$PYTHONPATH" | awk -v RS=: -v ORS=: '!a[$1]++' | sed 's/:$//')

prompt "bye now (hit a key)"

echo "PYTHONPATH: $PYTHONPATH"